<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.fastretry</groupId>
        <artifactId>retry-wheel-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>retry-wheel-spring-boot3-starter</artifactId>
    <packaging>jar</packaging>
    <description>通用重试任务框架，使用 Netty HashedWheelTimer 和 MySQL。</description>
    <name>retry-wheel-spring-boot3-starter</name>
    <url>https://github.com/fastretry/retry-wheel</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- 核心：自动装配基座 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- 基础：Spring Core（随 Boot 依赖树带入，此处不必重复声明） -->

        <!-- Netty HashedWheelTimer 在 netty-common -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-common</artifactId>
            <version>4.1.68.Final</version>
        </dependency>

        <!-- JSON：默认 Jackson（随 Boot），如需直接用可显式声明 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.18.0</version>
            <optional>true</optional>
        </dependency>

        <!-- MyBatis-Plus（示例选型），标记 optional，业务侧可换 JPA/JDBC -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus.version}</version>
            <optional>true</optional>
        </dependency>

        <!-- Micrometer（指标） -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <version>1.15.0</version>
        </dependency>

        <!-- Actuator 端点（管理）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring-boot.version}</version>
            <optional>true</optional>
        </dependency>

        <!-- 注解处理器：生成配置元数据，便于 IDE 自动提示 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- 测试（可选）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.38</version>
            <optional>true</optional>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>33.4.5-jre</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-circuitbreaker -->
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-circuitbreaker</artifactId>
            <version>2.3.0</version>
        </dependency>
    </dependencies>



    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <!-- Boot 3 推荐的自动装配清单 -->
                    <include>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</include>
                    <!-- 兼容旧版（可选） -->
                    <include>META-INF/spring.factories</include>
                    <!-- 生成的配置元数据（由 processor 输出到此目录） -->
                    <include>META-INF/spring-configuration-metadata.json</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <!-- 让 annotationProcessor 生效（生成配置元数据） -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
            </plugin>
        </plugins>
    </build>
</project>
